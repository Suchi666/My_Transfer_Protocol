    // Lock the mutex
    if (sem_wait(mutex) == -1) {
        perror("Failed to lock mutex");
        return 1;
    }

    printf("Mutex locked\n");

    // Simulate some critical section
    sleep(2);

    // Unlock the mutex
    if (sem_post(mutex) == -1) {
        perror("Failed to unlock mutex");
        return 1;
    }

    printf("Mutex unlocked\n");

    // Close and unlink the named mutex
    sem_close(mutex);
    sem_unlink(mutexName);

              // struct sockaddr_in addr;
              // if (getsockname(shared_memory[i].udp_socket_id, (struct sockaddr *)&addr, (socklen_t)sizeof(addr)) == -1) {
              //   perror("getsockname");exit(EXIT_FAILURE);}
              // char ip_address[INET_ADDRSTRLEN];
              // inet_ntop(AF_INET, &(addr.sin_addr), ip_address, INET_ADDRSTRLEN);
              // printf("Local IP Address: %s\n", ip_address);

              // // Convert port number to host byte order and print
              // int port_number = ntohs(addr.sin_port);
              // printf("Local Port Number: %d\n", port_number);